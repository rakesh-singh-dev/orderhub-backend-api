// src/config/emailConfig.js - UPDATED WITH 30-DAY DEFAULT

const { parserConfig } = require("./parserConfig");

// Auto-generate configuration from discovered parsers
const autoGeneratedConfig = parserConfig.getConfig();

module.exports = {
  // Auto-generated platforms from parser discovery
  platforms: autoGeneratedConfig.platforms,

  // Auto-generated platform configurations
  platformConfigs: autoGeneratedConfig.platformConfigs,

  // Auto-generated email patterns
  emailPatterns: autoGeneratedConfig.emailPatterns,

  // Auto-generated search queries
  searchQueries: autoGeneratedConfig.searchQueries,

  // UPDATED: Configuration for email search and processing
  defaultDaysToFetch: 30, // âœ… Changed from 7 to 30 to match frontend default
  maxEmailsPerSync: 100, // âœ… Increased from 50 to 100 for better coverage

  // Email search query configuration
  searchQuery: {
    subjects: ["order", "shipped", "delivered", "dispatched", "instamart"],
    excludePromotions: true,
    includeSpam: false,
  },

  // Promotional keywords to exclude
  promotionalKeywords: [
    "newsletter",
    "deals",
    "offers",
    "discount",
    "sale",
    "promotion",
    "marketing",
    "advertisement",
    "spam",
  ],

  // Order-related keywords to include
  orderKeywords: [
    "order",
    "order confirmation",
    "shipped",
    "delivered",
    "dispatched",
    "tracking",
    "confirmation",
  ],

  // ENHANCED: Sync options that match frontend choices
  syncOptions: [
    {
      days: 7,
      label: "Last 7 days",
      description: "Recent orders only",
      maxEmails: 30,
      estimatedDuration: "1-2 minutes",
    },
    {
      days: 15,
      label: "Last 15 days",
      description: "Good balance",
      maxEmails: 60,
      estimatedDuration: "2-3 minutes",
      recommended: true,
    },
    {
      days: 30,
      label: "Last 30 days",
      description: "Full month history",
      maxEmails: 100,
      estimatedDuration: "3-5 minutes",
    },
  ],

  // ENHANCED: Validation rules
  validation: {
    daysToFetch: {
      min: 1,
      max: 90,
      default: 30,
      allowedValues: [7, 15, 30], // Specific values allowed from frontend
    },
    maxResults: {
      min: 5,
      max: 500,
      default: 100,
    },
  },

  /**
   * Get supported platforms (auto-generated)
   */
  getSupportedPlatforms() {
    return this.platforms;
  },

  /**
   * Get configuration for a specific platform
   */
  getPlatformConfig(platform) {
    return this.platformConfigs[platform.toLowerCase()];
  },

  /**
   * Get email patterns for a platform
   */
  getEmailPatterns(platform) {
    return this.emailPatterns[platform.toLowerCase()];
  },

  /**
   * Get search queries for a platform
   */
  getSearchQueries(platform) {
    return this.searchQueries[platform.toLowerCase()];
  },

  /**
   * ENHANCED: Validate sync options from frontend
   */
  validateSyncOptions(options = {}) {
    const result = {
      valid: true,
      errors: [],
      validated: {},
    };

    // Validate daysToFetch
    const { daysToFetch } = options;
    if (daysToFetch !== undefined) {
      const daysNum = parseInt(daysToFetch);

      if (isNaN(daysNum)) {
        result.errors.push("daysToFetch must be a valid number");
        result.validated.daysToFetch = this.defaultDaysToFetch;
      } else if (daysNum < this.validation.daysToFetch.min) {
        result.errors.push(
          `daysToFetch must be at least ${this.validation.daysToFetch.min}`
        );
        result.validated.daysToFetch = this.defaultDaysToFetch;
      } else if (daysNum > this.validation.daysToFetch.max) {
        result.errors.push(
          `daysToFetch cannot exceed ${this.validation.daysToFetch.max} days`
        );
        result.validated.daysToFetch = this.defaultDaysToFetch;
      } else {
        result.validated.daysToFetch = daysNum;
      }
    } else {
      result.validated.daysToFetch = this.defaultDaysToFetch;
    }

    // Validate maxResults
    const { maxResults } = options;
    if (maxResults !== undefined) {
      const maxNum = parseInt(maxResults);

      if (isNaN(maxNum)) {
        result.errors.push("maxResults must be a valid number");
        result.validated.maxResults = this.maxEmailsPerSync;
      } else if (maxNum < this.validation.maxResults.min) {
        result.errors.push(
          `maxResults must be at least ${this.validation.maxResults.min}`
        );
        result.validated.maxResults = this.maxEmailsPerSync;
      } else if (maxNum > this.validation.maxResults.max) {
        result.errors.push(
          `maxResults cannot exceed ${this.validation.maxResults.max}`
        );
        result.validated.maxResults = this.maxEmailsPerSync;
      } else {
        result.validated.maxResults = maxNum;
      }
    } else {
      result.validated.maxResults = this.maxEmailsPerSync;
    }

    // Set overall validity
    result.valid = result.errors.length === 0;

    // Add metadata
    result.metadata = {
      originalOptions: options,
      appliedDefaults: {
        daysToFetch: result.validated.daysToFetch === this.defaultDaysToFetch,
        maxResults: result.validated.maxResults === this.maxEmailsPerSync,
      },
      recommendation: this.getRecommendedOption(result.validated.daysToFetch),
    };

    return result;
  },

  /**
   * Get recommended sync option info
   */
  getRecommendedOption(days) {
    return (
      this.syncOptions.find((option) => option.days === days) || {
        days,
        label: `Last ${days} days`,
        description: "Custom period",
        estimatedDuration: "2-4 minutes",
      }
    );
  },

  /**
   * Reload configuration (useful for development)
   */
  reload() {
    const newConfig = parserConfig.reload();
    this.platforms = newConfig.platforms;
    this.platformConfigs = newConfig.platformConfigs;
    this.emailPatterns = newConfig.emailPatterns;
    this.searchQueries = newConfig.searchQueries;
    console.log("ðŸ”„ Email config reloaded");
  },
};
